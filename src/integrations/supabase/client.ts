
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rszlyaouqcwfyexggbmt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJzemx5YW91cWN3ZnlleGdnYm10Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4MDU1NjgsImV4cCI6MjA1NzM4MTU2OH0.7_DqISn8FFYhluHKrfHfikbqprRQRBXBYnu07TkSW7U";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper functions for common operations
export const getTableData = async <T>(
  tableName: string, 
  options?: { 
    column?: string;
    value?: string; 
    limit?: number;
    orderBy?: { column: string; ascending?: boolean };
  }
) => {
  // Cast the table name to any to bypass TypeScript table name checking
  // Then chain with 'as any' for each method to satisfy TypeScript
  let query = supabase.from(tableName as any);

  if (options?.column && options?.value !== undefined) {
    query = (query as any).eq(options.column, options.value);
  }

  if (options?.limit) {
    query = (query as any).limit(options.limit);
  }

  if (options?.orderBy) {
    query = (query as any).order(options.orderBy.column, { 
      ascending: options.orderBy.ascending ?? false 
    });
  }

  const { data, error } = await (query as any).select();
  
  if (error) {
    console.error(`Error fetching data from ${tableName}:`, error);
    throw error;
  }

  return data as unknown as T[];
};

export const insertData = async <T extends Record<string, any>>(
  tableName: string, 
  data: T
) => {
  const { data: result, error } = await supabase
    .from(tableName as any)
    .insert(data as any)
    .select();

  if (error) {
    console.error(`Error inserting data into ${tableName}:`, error);
    throw error;
  }

  return result;
};

export const updateData = async <T extends Record<string, any>>(
  tableName: string,
  id: string | number,
  data: Partial<T>,
  idColumn: string = 'id'
) => {
  const { data: result, error } = await supabase
    .from(tableName as any)
    .update(data as any)
    .eq(idColumn, id)
    .select();

  if (error) {
    console.error(`Error updating data in ${tableName}:`, error);
    throw error;
  }

  return result;
};

export const deleteData = async (
  tableName: string,
  id: string | number,
  idColumn: string = 'id'
) => {
  const { error } = await supabase
    .from(tableName as any)
    .delete()
    .eq(idColumn, id);

  if (error) {
    console.error(`Error deleting data from ${tableName}:`, error);
    throw error;
  }
};
